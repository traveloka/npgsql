# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- tvlk/4.0.11.tvlk

pr:
- tvlk/4.0.11.tvlk

pool:
  name: Default

variables:
  buildConfiguration: 'Release'
  projects: 'src/Npgsql*/*.csproj'

steps:
- task: DotNetCoreInstaller@2
  displayName: Install .NET Core 2.2.207 with 2.2.8 runtime
  inputs:
    packageType: 'sdk'
    version: '2.2.207'

- script: dotnet pack src\Npgsql\Npgsql.csproj -c ReleaseOptimizedCryptography
  displayName: Pack Npgsql
#  inputs:
#    command: 'pack'
#    configuration: 'ReleaseOptimizedCryptography'
#    projects: 'src/Npgsql/Npgsql.csproj'
#    verbosityPack: 'normal'
#- task: DotNetCoreCLI@2
#  displayName: Pack Npgsql.Json.NET
#  inputs:
#    command: 'pack'
#    configuration: 'Release'
#    projects: 'src/Npgsql.Json.NET/Npgsql.Json.NET.csproj'
#- task: DotNetCoreCLI@2
#  displayName: Pack Npgsql.NodaTime
#  inputs:
#    command: 'pack'
#    configuration: 'Release'
#    projects: 'src/Npgsql.NodaTime/Npgsql.NodaTime.csproj'
#- task: DotNetCoreCLI@2
#  displayName: Pack Npgsql.LegacyPostgis
#  inputs:
#    command: 'pack'
#    configuration: 'Release'
#    projects: 'src/Npgsql.LegacyPostgis/Npgsql.LegacyPostgis.csproj'
#- task: DotNetCoreCLI@2
#  displayName: Pack Npgsql.RawPostgis
#  inputs:
#    command: 'pack'
#    configuration: 'Release'
#    projects: 'src/Npgsql.RawPostgis/Npgsql.RawPostgis.'
#- task: DotNetCoreCLI@2
#  displayName: Npgsql.NetTopologySuite
#  inputs:
#    command: 'pack'
#    configuration: 'Release'
#    projects: 'src/Npgsql.NetTopologySuite/Npgsql.NetTopologySuite.csproj'
#
#- task: DotNetCoreCLI@2
#  condition: eq(variables['Build.SourceBranchName'], 'master')
#  displayName: Publish to NuGet Feed
#  inputs:
#    command: 'push'
#    feedPublish: 'tvlk-ecb'
